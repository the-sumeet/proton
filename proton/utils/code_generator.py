import logging
import os

from proton.schema.method import Method
from proton.watcher import get_first_class_methods

logger = logging.getLogger(__name__)


def get_evaluate_js(js_code: str = ""):
    def evaluate_js(window):
        window.evaluate_js(js_code)

    return evaluate_js


def get_app_methods(current_dir: str, filename: str) -> tuple[str, list[Method]]:
    class_name, class_methods = get_first_class_methods(os.path.join(current_dir, filename))
    return class_name, class_methods


def get_js_code(current_dir: str, filename: str):
    class_name, class_methods = get_app_methods(current_dir, filename)
    logger.info(f"Using class '{class_name}' as app to generate JS code to inject")
    js_code = "window['py'] = {}; window['py']['main'] = {}; window['py']['main']['app'] = {};"
    for method in class_methods:
        args = ", ".join(method.args)
        js_code += f"""
            window['py']['main']['app']['{method.name}'] = async function {method.name}({args}) {{
                return await window.pywebview.api.{method.name}({args});
            }}
            """
    return js_code


def get_js_bindings(current_dir, filename):
    class_name, class_methods = get_app_methods(current_dir, filename)
    logger.info(f"Using class '{class_name}' as app to generate JS bindings")
    js_code = "// This file is automatically generated. DO NOT EDIT\n"

    for method in class_methods:
        args = ", ".join(method.args)
        js_code += f"""
export function {method.name}({args}) {{
  return window['py']['main']['app']['{method.name}']({args});
}}
        """
    return js_code
